## Notes of Merkle Tree
1. Leaf Node is the node at the base.
    or,
   A leaf node contains only one data element and no child nodes

2. Hash is a transaction is a part of the leaf node, its not everything

3. Merkle Root: The root hash value generated by hashing all transactions in binary tree structure using SHA-256.

4. But don't you think each miner should have same Merkle Root?

    Yes, in an ideal scenario where all miners are working on the exact same set of transactions at the same time, they would all have the same Merkle Root. However, in practice, this is not the case due to a few reasons:

    Transaction Pool Differences: Each miner maintains their own transaction pool (also known as a mempool), which is a set of unconfirmed transactions that they have received from other nodes in the network. Due to network latency and other factors, the mempool of each miner can be slightly different at any given moment. When miners select transactions from their mempool to include in a new block, they may end up with different sets of transactions, leading to different Merkle Roots academy.binance.com.
    Order of Transactions: Even if two miners have the same set of transactions in their mempool, they could include those transactions in their block in a different order, which would also result in different Merkle Roots learnmeabitcoin.com.
    Coinbase Transaction: Each miner includes a special transaction in their block, called a coinbase transaction, that creates new bitcoins and pays them out to the miner's own bitcoin address. Since every miner has a different bitcoin address, the coinbase transaction is unique for each miner, which again leads to different Merkle Roots bitcoin.stackexchange.com.
    So, while in theory all miners should have the same Merkle Root if they are working on the same set of transactions in the same order, in practice, due to differences in mempools, transaction order, and the unique coinbase transaction, each miner often ends up with a different Merkle Root in their block

5. Benefits of Merkle Trees:
    a. Merkle Trees allow for quick verification of data integrity.
    b.The disk space used up is very little compared to the entire set of transactions. The Merkle Root is included in the block header for this reason.
    c. If you have two sets of identical transactions, verifying that they are the same with a Merkle Tree is faster than verifying the transactions individually, one at a time. One can verify that a block has not been modified by only knowing the Merkle Root.

6. Use cases outside of the blockchain

    -IPFS
    -Git
    -Distributed databases such as AWS DynamoDB and Apache Cassandra use Merkle trees to control discrepancie

7. Uses in Smart contracts!!!
    Imagine we are creating a DAO, where we are using a mapping of tokens to the owners.
    Now imagine there may be millions of owners of the our tokens, in that case we have to store all the data on the EVM via our smart contract.
    So in that case for storing the huge amount of addresses of the owners we will have to spend millions of Dollars.
    That is the case where Merkle tree comes into the scene.

8. Helpfull package:
    a. 'npm install @openzeppelin/contracts keccak256 merkletreejs'

